import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { API_UL } from "@/utils";

export interface ProductType {
  id: number;
  title: string;
  description: string;
  price: number;
  currency: string;
  image: string;
  rating: number; 
}

export interface ProductsApiResponse {
  first: number | null;
  prev: number | null;
  next: number | null;
  last: number | null;
  pages: number | null;
  items: number | null;
  data: ProductType[]
}

// Define a service using a base URL and expected endpoints
export const productsApiSlice = createApi({

  baseQuery: fetchBaseQuery({ baseUrl: `${API_UL}/products` }),
  reducerPath: "productsApi",
  tagTypes: ["products"],

  endpoints: (build) => ({

    // Fetch products with pagination
    getProducts: build.query<ProductsApiResponse, { page: number; size: number }>({
      query: ({ page = 1, size = 10 }) => `?_page=${page}&_per_page=${size}`,
      providesTags: (result, error, arg) => [{ type: "products", id: arg.page }],
    }),
    
    // Fetch a single product by ID
    getProductById: build.query<ProductType, number>({
      query: (id) => `/${id}`,
      providesTags: (result, error, id) => [{ type: "products", id }],
    }),

  }),
  
});

// Hooks are auto-generated by RTK Query
// Use `productsApiSlice.endpoints.getProducts.useQuery` for fetching products with pagination
export const { useGetProductsQuery, useGetProductByIdQuery } = productsApiSlice;
